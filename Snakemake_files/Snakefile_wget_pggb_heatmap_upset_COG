import glob
import os
import shutil

import yaml
configfile: "config.yaml"

SAMPLES = []
with open("config.yaml", "r") as yaml_file:
    genome_data = yaml.safe_load(yaml_file)
    if "ids" in genome_data.keys():
        for id in genome_data["ids"]:
            SAMPLES.append(id)
    if "input_genbanks" in genome_data.keys():
        for gb_path in genome_data["input_genbanks"]:
            cmd = "grep 'ACCESSION' "+gb_path
            returned_value = subprocess.getoutput(cmd)
            words = returned_value.split()
            name = words[1]
            #words = returned_value.split()
            #SAMPLES.append(words[1])
            words = gb_path.split("/")
            genbank_file_name = words[-1]
            x = genbank_file_name.replace(".", "_")
            cmd = "sed -i 's/ACCESSION   "+name+"/ACCESSION   "+x+"/g' "+gb_path
            subprocess.getoutput(cmd)

            cmd_locus = "grep 'LOCUS' "+gb_path
            returned_value = subprocess.getoutput(cmd_locus)
            words_locus = returned_value.split()
            name_locus = words_locus[1]
            cmd = "sed -i 's/LOCUS       "+name_locus+"/LOCUS       "+x+"/' "+gb_path
            subprocess.getoutput(cmd)

            cmd = "grep 'ACCESSION' "+gb_path
            returned_value = subprocess.getoutput(cmd)
            words = returned_value.split()
            SAMPLES.append(words[1])



rule final:
 input:
  "outputs/GCskew.txt",
  "outputs/pggb_out/all_genomes.fa.smooth.final.gfa",
  "outputs/pav_matrix.tsv",
  "outputs/cog_output.txt",
  "outputs/rarefaction_curves.txt", 
  "outputs/vntr_matrix.tsv"

rule ncbi_datasets:
    input:
        "config.yaml"
    output:
        expand("outputs/genomes/{sample}.fasta", sample=SAMPLES),
        expand("outputs/genomes/{sample}.gb", sample=SAMPLES),
        expand("outputs/genomes/{sample}.prt", sample=SAMPLES),
        expand("outputs/genomes/{sample}.nuc", sample=SAMPLES),
        genomes="outputs/genomes/genomes.txt",
        strains="outputs/genomes/strains.txt"
    shell:
        """
        perl $PANEX_PATH/Perl/get_data.pl {input} outputs/genomes
        """


rule gcskew:
    input:
        "outputs/genomes/{sample}.fasta" 
    output:
        "outputs/genomes/{sample}.fasta.gcskew.txt"
    shell:
        """
        python3 $PANEX_PATH/SkewIT/src/gcskew.py -i {input} -o {input}.gcskew.txt -k 1000 -w 1000
        """ 

rule concat_gcskew:
    input:
        expand("outputs/genomes/{sample}.fasta.gcskew.txt", sample=SAMPLES)
    output:
        out2="outputs/GCskew.txt"
    shell:
        """
         cat {input} >>{output.out2}
        """

rule genbank2gff3:
    input:
        "outputs/genomes/{sample}.gb"
    output:
        gff1="outputs/genomes/{sample}.gb.gff",
    shell:
        """
        perl $PANEX_PATH/Perl/bp_genbank2gff3.pl -o outputs/genomes {input}
        """

rule pggb:
    input:
        expand("outputs/genomes/{sample}.fasta", sample=SAMPLES),
        expand("outputs/genomes/{sample}.gb.gff", sample=SAMPLES),
    output:
        gfa="outputs/pggb_out/all_genomes.fa.smooth.final.gfa",
        png1="outputs/pggb_out/all_genomes.fa.lay.draw.png",
        png2="outputs/pggb_out/all_genomes.fa.og.viz_multiqc.png",
        vcf="outputs/all_genomes.vcf",
    shell:
        """
        samtools faidx outputs/genomes/all_genomes.fa
        reference=$(head -1 outputs/genomes/strains.txt | awk '{{print $2}}')
        pggb -i outputs/genomes/all_genomes.fa -o outputs/pggb_out -V $reference -m -M
        mv outputs/pggb_out/all_genomes.*smooth.final.gfa {output.gfa}
        mv outputs/pggb_out/all_genomes.*lay.draw.png {output.png1}
        mv outputs/pggb_out/all_genomes.fa.*.og.viz_multiqc.png {output.png2}
        mv outputs/pggb_out/all_genomes.*vcf {output.vcf}
        """

rule odgi:
    input:
        gfa="outputs/pggb_out/all_genomes.fa.smooth.final.gfa",
    output:
        og="outputs/pggb_out/all_genomes.fa.smooth.final.gfa.og",
        distance="outputs/pggb_out/all_genomes.fa.smooth.final.gfa.og.distance",
    shell:
        """
        odgi build -g {input} -o {output.og} 
        odgi similarity -i {output.og} -d >{output.distance}
        """


rule create_gene_paths:
    input:
        gff="outputs/genomes/{sample}.gb.gff",
        gfa="outputs/pggb_out/all_genomes.fa.smooth.final.gfa",
    output:
        basename="outputs/genomes/{sample}.gene_segments",
        gene_length="outputs/genomes/{sample}.gene_segments.gene_length.txt",
        bed="outputs/genomes/{sample}.gene_segments.bed",
    shell:
        """
        perl $PANEX_PATH/Perl/CreateGenePathsFromGFA.pl {input.gfa} {input.gff} {output.basename}
        """

rule bedtools_intersect:
    input:
        strains="outputs/genomes/strains.txt",
        bedfiles=expand("outputs/genomes/{sample}.gene_segments.bed", sample=SAMPLES)
    params:
        identity=config['identity']
    output:
        "outputs/pav_matrix.tsv",
    shell:
        """
        perl $PANEX_PATH/Perl/GeneratePAVfromBed.pl {input.strains} outputs/genomes {output} {params.identity}
        """

rule trf:
    input:
        fasta="outputs/genomes/{sample}.fasta",
        gff="outputs/genomes/{sample}.gb.gff",
    output:
        out="outputs/genomes/{sample}.fasta.trf.txt",
        outbed="outputs/genomes/{sample}.fasta.trf.bed",
        log="outputs/genomes/{sample}.fasta.trf.log",
    shell:
        """
        trf {input.fasta} 2 3 5 80 20 50 12 -h -f 2>{output.log} 1>{output.out}
        mv {wildcards.sample}.fasta.2.3.5.80.20.50.12.dat {output.out}
        pathname=$(grep -v '#' -m 1 {input.gff} | awk {{'print $1'}} )
        grep -P '^\d' {output.out} | awk -v pathname="$pathname" -F ' ' '{{print pathname"\t"$1"\t"$2"\trepeat"NR"_"$14"_"$4}}' >{output.outbed}
        """

rule create_VNTR_paths:
    input:
        bed="outputs/genomes/{sample}.fasta.trf.bed",
        gfa="outputs/pggb_out/all_genomes.fa.smooth.final.gfa",
    output:
        basename="outputs/trf/{sample}.vntr_segments",
        bed="outputs/trf/{sample}.vntr_segments.bed",
    shell:
        """
        perl /projects/xl/Xantho_pangenomics/PanExplorer_workflow/Perl/TransferBedOnGFAGraph.pl {input.gfa} {input.bed} {output.basename}
        """

rule bedtools_intersect_vntr:
    input:
        strains="outputs/genomes/strains.txt",
        bedfiles=expand("outputs/trf/{sample}.vntr_segments.bed", sample=SAMPLES)
    params:
        identity=config['identity']
    output:
        "outputs/heatmap.svg.heatmap_plotly.html"
    shell:
        """
        perl /projects/xl/Xantho_pangenomics/PanExplorer_workflow/Perl/GeneratePAVfromBed3.pl {input.strains} outputs/trf {output}.tmp 1
        perl /projects/xl/Xantho_pangenomics/PanExplorer_workflow/Perl/ConvertVntrMatrix.pl {output}.tmp {output} {input.strains} 
        """

rule cog:
    input:
        pav="outputs/pav_matrix.tsv"
    output:
        cog="outputs/cog_output.txt",
        cogstat="outputs/cog_stats.txt",
        cogstat2="outputs/cog_stats2.txt",
        cogofclusters="outputs/cog_of_clusters.txt"
    shell:
        """
        perl $PANEX_PATH/Perl/GetCogOfCluster.pl {input} outputs/genomes {output.cog} {output.cogstat} {output.cogstat2} {output.cogofclusters} outputs/genomes/strains.txt
        """

rule heatmap_upset:
    input:
        pav="outputs/pav_matrix.tsv"
    output:
        heatmap="outputs/heatmap.svg.gz",
        html="outputs/heatmap.svg.heatmap_plotly.html",
        upsetr="outputs/upsetr.svg",
        binpav="outputs/heatmap.svg.pangenes_01matrix.txt"
    shell:
        """
        perl $PANEX_PATH/Perl/GenerateHeatmapFromPAV.pl {input.pav} outputs/heatmap.svg
        mv outputs/heatmap.svg.upsetr.svg {output.upsetr}
        """

rule micropan:
    input:
        binpav="outputs/heatmap.svg.pangenes_01matrix.txt"
    output:
        txt="outputs/rarefaction_curves.txt",
        pdf="outputs/rarefaction_curves.pdf",
        svg="outputs/rarefaction_curves.svg",
        heaps="outputs/heaps.tsv"
    shell:
        """
        Rscript $PANEX_PATH/R/micropan_rarefaction.R -f {input.binpav} -p {output.pdf} -a {output.heaps} -o {output.txt}
        pdf2svg {output.pdf} {output.svg}
        """
